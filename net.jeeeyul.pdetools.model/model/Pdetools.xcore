@GenModel(editDirectory="/net.jeeeyul.pdetools.edit/src-gen", codeFormatting="true", basePackage="net.jeeeyul.pdetools.model")
@Ecore(nsURI="http://jeeeyul.net/pde-tools", nsPrefix="p")
package net.jeeeyul.pdetools.model.pdetools

import java.util.Date
import org.eclipse.swt.dnd.Clipboard
import java.util.ArrayList
import org.eclipse.swt.dnd.Transfer
import org.eclipse.swt.dnd.TextTransfer
import org.eclipse.swt.dnd.RTFTransfer
import org.eclipse.swt.graphics.ImageData
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.resources.IFolder
import org.eclipse.core.runtime.Path
import net.jeeeyul.pdetools.shared.ImageDataSerializer
import org.eclipse.core.runtime.IPath
import org.eclipse.jface.resource.ImageDescriptor

type IFile wraps IFile create
{
	if(it == null || it.trim.empty){
		return null
	} 
	ResourcesPlugin::workspace.root.getFile(new Path(it) )
}
convert
{
	if(it == null){
		return ""
	}
	it.fullPath.toPortableString
}

type IFolder wraps IFolder create
{ 
	ResourcesPlugin::workspace.root.getFolder(new Path(it))
}
convert
{
	it.fullPath.toPortableString
}

type ImageData wraps ImageData
create{
	ImageDataSerializer::deserialize(it)
}
convert{
	ImageDataSerializer::serialize(it)
}

type Clipboard wraps Clipboard
type Exception wraps Exception
type ImageDescriptor wraps ImageDescriptor

enum ClipItemSortOption{
	CAPTURED_ORDER as "captured-order" = 0
	LAST_USE as "last-use" = 1
	USING_COUNT as "using-count" = 2	
	ACTIVE as "active" = 3
}

class ClipboardElement{
	
}

class ClipHistory extends ClipboardElement{
	refers ClipboardEntry activeEntry
	contains ClipboardEntry[] entries opposite parent
} 

@GenModel(labelFeature="textContent")
class ClipboardEntry extends ClipboardElement{
	int usingCount
	Date lastUsedTime
 	
 	@GenModel(propertyMultiLine="true", propertyCategory="Content")
	String textContent
	
	@GenModel(propertyMultiLine="true", propertyCategory="Content")
	String rtfContent
	Date takenTime
	
	@GenModel(property="None")
	String partId
	IFile releatedFile
	
 	@GenModel(property="None")
	container ClipHistory parent opposite entries 
 	
	contains TextRange textRange
	contains JavaInfo javaInfo
	
	/*
	 * 현재 시스템 클립보드의 클립보드 컨텐츠인지 여부.
	 */
 	@GenModel(propertyDescription="Whether it is current content of clipboard.")
	derived boolean active get{
		if(parent == null){
			return false
		}
		
		parent.activeEntry == this
	}
	
	op void transferTo(Clipboard clipboard){
		var transferList = new ArrayList<Transfer>
		var dataList = new ArrayList<Object>
		
		if(textContent != null){
			transferList += TextTransfer::instance
			dataList += textContent
		}
		
		if(rtfContent != null){
			transferList += RTFTransfer::instance
			dataList += rtfContent
		}
		
		clipboard.setContents(dataList, transferList)
	}
	
	op void increaseUsing(){
		usingCount = usingCount + 1
		lastUsedTime = new Date()
	}
}

class TextRange extends ClipboardElement{
	int offset
	int length
	int startLine
	int endLine
}

class JavaInfo extends ClipboardElement{
	String qualifiedTypeName
	String enclosingElementName
}


// for icg
interface FieldNameOwner{
	String fieldName
}

class Palette extends FieldNameOwner
{
	container Palette parent opposite subPalettes
	
	/**
	 * 팔레트가 표현하는 워크스페이스상의 폴더.
	 */
	IFolder folder
	
	contains Palette[] subPalettes opposite parent
	contains ImageFile[] imageFiles opposite parent
}

class ImageFile extends FieldNameOwner
{
	container Palette parent opposite imageFiles
	
	/**
	 * 워크스페이스 상의 실제 IFile
	 */
	id IFile file
}

// snapshot
class SnapshotRepository
{
	contains SnapshotGroup [] groups opposite parent
}

class SnapshotGroup
{
	container SnapshotRepository parent opposite groups
	Date date
	contains SnapshotEntry [] entries opposite parent
}

class SnapshotEntry
{
	container SnapshotGroup parent opposite entries
	Date takenTime
	String originalFile
	String renderedFile
	String controlType
	String name
	contains ShellInfo shellInfo
	
	derived String absoulteVisibleFilePath get{
		var base = new Path(eResource.URI.toFileString).removeLastSegments(1).setDevice(null)
		var IPath filePath = null
		
		if(this.renderedFile != null && this.renderedFile.trim.empty == false){
			filePath = base.append(renderedFile)
		} else{
			filePath = base.append(getOriginalFile)	
		}
		
		return filePath.toFile.absolutePath
	}
}

class ShellInfo{
	ImageData icon
	int shellStyle
	String shellTitle
}


// Command Spy
class CommandHistory{
	contains CommandEvent[] events
}

class CommandEvent{
	contains CommandEvent[] children
	String commandId
	String name
	ImageDescriptor imageDescriptor
	long time
	CommandExecutionType ^type
	Exception exception
}

enum CommandExecutionType{
	EXECUTING
	SUCCEED
	FAILED
	NOT_HANDLED
}