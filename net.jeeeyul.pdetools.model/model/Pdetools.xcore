@GenModel(basePackage="net.jeeeyul.pdetools.model", editDirectory="/net.jeeeyul.pdetools.edit/src-gen")
@Ecore(nsURI="http://jeeeyul.net/pde-tools", nsPrefix="p")
package pdetools

import java.util.Date
import org.eclipse.swt.dnd.Clipboard
import java.util.ArrayList
import org.eclipse.swt.dnd.Transfer
import org.eclipse.swt.dnd.TextTransfer
import org.eclipse.swt.dnd.RTFTransfer
import org.eclipse.swt.graphics.ImageData
import org.eclipse.core.resources.IFile
import org.eclipse.core.resources.ResourcesPlugin
import org.eclipse.core.resources.IFolder
import org.eclipse.core.runtime.Path
import net.jeeeyul.pdetools.shared.ImageDataSerializer

type IFile wraps IFile create
{
	if(it == null || it.trim.empty){
		return null
	}
	ResourcesPlugin::workspace.root.getFile(new Path(it) )
}
convert
{
	if(it == null){
		return ""
	}
	it.fullPath.toPortableString
}

type IFolder wraps IFolder create
{ 
	ResourcesPlugin::workspace.root.getFolder(new Path(it))
}
convert
{
	it.fullPath.toPortableString
}

type ImageData wraps ImageData
create{
	ImageDataSerializer::deserialize(it)
}
convert{
	ImageDataSerializer::serialize(it)
}

type Clipboard wraps Clipboard

class ClipboardElement{
	
}

class ClipHistory extends ClipboardElement{
	contains ClipboardEntry[] entries opposite parent
} 

@GenModel(labelFeature="textContent")
class ClipboardEntry extends ClipboardElement{
	int usingCount
	Date lastUsedTime
 	
 	@GenModel(propertyMultiLine="true", propertyCategory="Content")
	String textContent
	
	@GenModel(propertyMultiLine="true", propertyCategory="Content")
	String rtfContent
	Date takenTime
	
	@GenModel(property="None")
	String partId
	IFile releatedFile
	
 	@GenModel(property="None")
	container ClipHistory parent opposite entries 
 	
	contains TextRange textRange
	contains JavaInfo javaInfo
	
	op void transferTo(Clipboard clipboard){
		var transferList = new ArrayList<Transfer>
		var dataList = new ArrayList<Object>
		
		if(textContent != null){
			transferList += TextTransfer::instance
			dataList += textContent
		}
		
		if(rtfContent != null){
			transferList += RTFTransfer::instance
			dataList += rtfContent
		}
		
		clipboard.setContents(dataList, transferList)
	}
	
	op void increaseUsing(){
		usingCount = usingCount + 1
		lastUsedTime = new Date()
	}
}

class TextRange extends ClipboardElement{
	int offset
	int length
	int startLine
	int endLine
}

class JavaInfo extends ClipboardElement{
	String qualifiedTypeName
	String enclosingElementName
}


// for icg
interface FieldNameOwner{
	String fieldName
}

class Palette extends FieldNameOwner
{
	container Palette parent opposite subPalettes
	
	/**
	 * 팔레트가 표현하는 워크스페이스상의 폴더.
	 */
	IFolder folder
	
	contains Palette[] subPalettes opposite parent
	contains ImageFile[] imageFiles opposite parent
}

class ImageFile extends FieldNameOwner
{
	container Palette parent opposite imageFiles
	
	/**
	 * 워크스페이스 상의 실제 IFile
	 */
	id IFile file
}

// snapshot
class SnapshotRepository
{
	String repositoryLocation
	contains SnapshotGroup [] groups opposite parent
}

class SnapshotGroup
{
	container SnapshotRepository parent opposite groups
	Date date
	contains SnapshotEntry [] entries opposite parent
}

class SnapshotEntry
{
	container SnapshotGroup parent opposite entries
	Date takenTime
	String originalFile
	String renderedFile
	String controlType
	String name
	contains ShellInfo shellInfo
	
	derived String absoulteVisibleFilePath get{
		var base = new Path(parent.parent.repositoryLocation).removeLastSegments(1).setDevice(null)
		
		var filePath = if(renderedFile != null){
			base.append(renderedFile)
		} else{
			base.append(getOriginalFile)	
		}
		
		return filePath.toFile.absolutePath
	}
}

class ShellInfo{
	ImageData icon
	int shellStyle
	String shellTitle
}