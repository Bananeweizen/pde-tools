package net.jeeeyul.pdetools.icg.builder

import net.jeeeyul.pdetools.icg.builder.model.palette.ImageFile
import net.jeeeyul.pdetools.icg.builder.model.palette.Palette
import org.eclipse.xtend.lib.Property
import net.jeeeyul.pdetools.icg.builder.model.ICGConfiguration

class ImageCosntantGenerator {
	@Property ICGConfiguration config ;
	@Property Palette rootPalette
	val ImagePreviewGenerator previewGenerator = new ImagePreviewGenerator()

	def generate() '''
		package « config.generatePackageName »;
		
		import java.net.URL;
		import org.eclipse.core.runtime.Platform;
		import org.eclipse.jface.resource.ImageRegistry;
		import org.eclipse.swt.graphics.Image;
		import org.eclipse.ui.ISharedImages;
		import org.eclipse.ui.PlatformUI;
		
		/*
		 * Generated by PDE Tools.
		 */
		public class « config.generateClassName »{
			« FOR eachPalette : rootPalette.subPalettes SEPARATOR System::getProperty("line.separator")»
				« eachPalette.generateSubPalette »
			« ENDFOR »
			
			« FOR eachFile : rootPalette.imageFiles SEPARATOR System::getProperty("line.separator") »
				« eachFile.generateField() »
			« ENDFOR »
			
			private static final ImageRegistry registry = new ImageRegistry();
			
			public static Image getImage(String key){
				Image result = registry.get(key);
				if(result == null){
					result = loadImage(key);
					registry.put(key, result);
				}
				return result;
			}
			
			private static Image loadImage(String key) {
				try {
					URL resource = Platform.getBundle("« config.bundleId »").getResource(key);
					Image image = new Image(null, resource.openStream());
					return image;
				} catch (Exception e) {
					e.printStackTrace();
					return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK);
				}
			}
		}
	'''

	def private generateSubPalette(Palette palette) '''
		public static interface « palette.fieldName »{
			« FOR eachFile : palette.imageFiles »
				« eachFile.generateField() »
			« ENDFOR »
		}
	'''

	def private generateField(ImageFile file) '''
		/**
		 * « previewGenerator.generate(file.file) »
		 * Image constant for «file.file.projectRelativePath.toPortableString»
		 */
		public static final String « file.fieldName » = "« file.file.projectRelativePath.toPortableString »";
	'''
}