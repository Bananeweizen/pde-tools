package net.jeeeyul.pdetools.icg.builder.parts;

import com.google.inject.Inject;
import net.jeeeyul.pdetools.icg.builder.model.ICGConfiguration;
import net.jeeeyul.pdetools.icg.builder.model.palette.ImageFile;
import net.jeeeyul.pdetools.icg.builder.model.palette.Palette;
import net.jeeeyul.pdetools.icg.builder.parts.ImagePreviewGenerator;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IFolder;
import org.eclipse.core.runtime.IPath;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Functions.Function0;

@SuppressWarnings("all")
public class ImageCosntantGenerator {
  @Inject
  private ICGConfiguration config;
  
  private final ImagePreviewGenerator previewGenerator = new Function0<ImagePreviewGenerator>() {
    public ImagePreviewGenerator apply() {
      ImagePreviewGenerator _imagePreviewGenerator = new ImagePreviewGenerator();
      return _imagePreviewGenerator;
    }
  }.apply();
  
  public CharSequence generateJavaSource(final Palette rootPalette) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Copyright 2012 Jeeeyul Lee, Seoul, Korea");
    _builder.newLine();
    _builder.append("// https://github.com/jeeeyul/pde-tools");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// This module is multi-licensed and may be used under the terms");
    _builder.newLine();
    _builder.append("// of any of the following licenses:");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// EPL, Eclipse Public License, V1.0 or later, http://www.eclipse.org/legal");
    _builder.newLine();
    _builder.append("// LGPL, GNU Lesser General Public License, V2.1 or later, http://www.gnu.org/licenses/lgpl.html");
    _builder.newLine();
    _builder.append("// GPL, GNU General Public License, V2 or later, http://www.gnu.org/licenses/gpl.html");
    _builder.newLine();
    _builder.append("// AL, Apache License, V2.0 or later, http://www.apache.org/licenses");
    _builder.newLine();
    _builder.append("// BSD, BSD License, http://www.opensource.org/licenses/bsd-license.php");
    _builder.newLine();
    _builder.append("// MIT, MIT License, http://www.opensource.org/licenses/MIT");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// Please contact the author if you need another license.");
    _builder.newLine();
    _builder.append("// This module is provided \"as is\", without warranties of any kind.");
    _builder.newLine();
    _builder.append("package ");
    String _generatePackageName = this.config.getGeneratePackageName();
    _builder.append(_generatePackageName, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.net.URL;");
    _builder.newLine();
    _builder.append("import org.eclipse.core.runtime.Platform;");
    _builder.newLine();
    _builder.append("import org.eclipse.jface.resource.ImageDescriptor;");
    _builder.newLine();
    _builder.append("import org.eclipse.jface.resource.ImageRegistry;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.graphics.Image;");
    _builder.newLine();
    _builder.append("import org.eclipse.swt.widgets.Display;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.ISharedImages;");
    _builder.newLine();
    _builder.append("import org.eclipse.ui.PlatformUI;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Generated by PDE Tools.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public class ");
    String _generateClassName = this.config.getGenerateClassName();
    _builder.append(_generateClassName, "");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Palette> _subPalettes = rootPalette.getSubPalettes();
      boolean _hasElements = false;
      for(final Palette eachPalette : _subPalettes) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          String _lineSeparator = this.lineSeparator();
          _builder.appendImmediate(_lineSeparator, "	");
        }
        _builder.append("\t");
        CharSequence _generateSubPalette = this.generateSubPalette(eachPalette);
        _builder.append(_generateSubPalette, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.newLine();
    {
      EList<ImageFile> _imageFiles = rootPalette.getImageFiles();
      boolean _hasElements_1 = false;
      for(final ImageFile eachFile : _imageFiles) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          String _lineSeparator_1 = this.lineSeparator();
          _builder.appendImmediate(_lineSeparator_1, "	");
        }
        _builder.append("\t");
        CharSequence _generateField = this.generateField(eachFile);
        _builder.append(_generateField, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("private static final ImageRegistry REGISTRY = new ImageRegistry(Display.getDefault());");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Image getImage(String key){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Image result = REGISTRY.get(key);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(result == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result = loadImage(key);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("REGISTRY.put(key, result);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ImageDescriptor getImageDescriptor(String key){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ImageDescriptor result = REGISTRY.getDescriptor(key);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if(result == null){");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("result = loadImageDescriptor(key);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("REGISTRY.put(key, result);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return result;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Image loadImage(String key) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("URL resource = Platform.getBundle(\"");
    String _bundleId = this.config.getBundleId();
    _builder.append(_bundleId, "			");
    _builder.append("\").getResource(key);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("Image image = new Image(null, resource.openStream());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return image;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return PlatformUI.getWorkbench().getSharedImages().getImage(ISharedImages.IMG_OBJS_ERROR_TSK);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static ImageDescriptor loadImageDescriptor(String key) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("URL resource = Platform.getBundle(\"");
    String _bundleId_1 = this.config.getBundleId();
    _builder.append(_bundleId_1, "			");
    _builder.append("\").getResource(key);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("ImageDescriptor descriptor = ImageDescriptor.createFromURL(resource);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return descriptor;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return PlatformUI.getWorkbench().getSharedImages().getImageDescriptor(ISharedImages.IMG_OBJS_ERROR_TSK);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence generateSubPalette(final Palette palette) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Constants set for folder \'");
    IFolder _folder = palette.getFolder();
    IPath _projectRelativePath = _folder.getProjectRelativePath();
    String _portableString = _projectRelativePath.toPortableString();
    _builder.append(_portableString, " ");
    _builder.append("\'");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static interface ");
    String _fieldName = palette.getFieldName();
    _builder.append(_fieldName, "");
    _builder.append("{");
    _builder.newLineIfNotEmpty();
    {
      EList<Palette> _subPalettes = palette.getSubPalettes();
      boolean _hasElements = false;
      for(final Palette eachSub : _subPalettes) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          String _lineSeparator = this.lineSeparator();
          _builder.appendImmediate(_lineSeparator, "	");
        }
        _builder.append("\t");
        CharSequence _generateSubPalette = this.generateSubPalette(eachSub);
        _builder.append(_generateSubPalette, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<ImageFile> _imageFiles = palette.getImageFiles();
      boolean _hasElements_1 = false;
      for(final ImageFile eachFile : _imageFiles) {
        if (!_hasElements_1) {
          _hasElements_1 = true;
        } else {
          String _lineSeparator_1 = this.lineSeparator();
          _builder.appendImmediate(_lineSeparator_1, "	");
        }
        _builder.append("\t");
        CharSequence _generateField = this.generateField(eachFile);
        _builder.append(_generateField, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence generateField(final ImageFile file) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    {
      boolean _isGenerateImagePreview = this.config.isGenerateImagePreview();
      if (_isGenerateImagePreview) {
        _builder.append(" ", "");
        _builder.append("* ");
        IFile _file = file.getFile();
        String _generate = this.previewGenerator.generate(_file);
        _builder.append(_generate, "");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append(" ");
    _builder.append("* Image constant for ");
    IFile _file_1 = file.getFile();
    IPath _projectRelativePath = _file_1.getProjectRelativePath();
    String _portableString = _projectRelativePath.toPortableString();
    _builder.append(_portableString, " ");
    _builder.newLineIfNotEmpty();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("public static final String ");
    String _fieldName = file.getFieldName();
    _builder.append(_fieldName, "");
    _builder.append(" = \"");
    IFile _file_2 = file.getFile();
    IPath _projectRelativePath_1 = _file_2.getProjectRelativePath();
    String _portableString_1 = _projectRelativePath_1.toPortableString();
    _builder.append(_portableString_1, "");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private String lineSeparator() {
    String _property = System.getProperty("line.separator");
    return _property;
  }
}
